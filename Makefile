# –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
SERVICES_WITH_DATA = grafana loki prometheus jaeger vector

UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Linux)
  OS_TYPE := Linux
  HOSTS_FILE := /etc/hosts
  FLUSH_DNS_CMD := sudo systemctl restart NetworkManager # –∏–ª–∏ equivalent
else ifeq ($(UNAME_S),Darwin)
  OS_TYPE := Darwin # macOS
  HOSTS_FILE := /etc/hosts
  FLUSH_DNS_CMD := sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder
else ifeq ($(OS),Windows_NT)
  OS_TYPE := Windows
  HOSTS_FILE := C:/Windows/System32/drivers/etc/hosts
  FLUSH_DNS_CMD := ipconfig /flushdns
else
  OS_TYPE := Unknown
  HOSTS_FILE := /etc/hosts # Default to Unix-like
  FLUSH_DNS_CMD := echo "Please consult your OS documentation to flush DNS cache."
endif


HOSTS_SERVICES = grafana jaeger loki otel-collector prometheus vector

validate-vector:
	@echo "Validating Vector configuration with Docker..."
	docker run --rm \
		--network=promgraph_monitoring \
		-v "$(PWD)/config/vector/vector.yaml:/etc/vector/vector.yaml:ro" \
		timberio/vector:0.47.0-alpine \
		validate /etc/vector/vector.yaml
	@echo "Vector configuration validated successfully."

# for debug purposes
full-reload-grafana:
	docker-compose stop grafana && docker-compose rm grafana -f && \
	rm -rf ./data/grafana && sleep 1 && docker-compose up -d grafana

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ª–∏ (Targets) ---

# –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ—Å—å —Å—Ç–µ–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
up:
	@echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã..."
	@docker-compose up -d

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
down:
	@echo "üî• –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã..."
	@docker-compose down

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
logs:
	@echo "üìÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏..."
	@docker-compose logs -f --tail=100

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, make logs s=grafana)
logs-s:
	@echo "üìÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ $(s)..."
	@docker-compose logs -f --tail=100 $(s)

# --- –¶–µ–ª–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---

# –ü—Ä–∏–≤–∞—Ç–Ω–∞—è "—Ñ—É–Ω–∫—Ü–∏—è" –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
# –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ $(call clean_service_data, <–∏–º—è_—Å–µ—Ä–≤–∏—Å–∞>)
define clean_service_data
    @echo "üßπ –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞: $1..."
    @if [ -d "./data/$1" ]; then \
        rm -rf ./data/$1/*; \
        echo "   -> –î–∞–Ω–Ω—ã–µ –¥–ª—è $1 –æ—á–∏—â–µ–Ω—ã."; \
    else \
        echo "   -> –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ./data/$1 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º."; \
    fi
endef

# –¶–µ–ª—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Grafana
clean-grafana:
	$(call clean_service_data,grafana)

# –¶–µ–ª—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Loki
clean-loki:
	$(call clean_service_data,loki)

# –¶–µ–ª—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Prometheus
clean-prometheus:
	$(call clean_service_data,prometheus)

# –¶–µ–ª—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Jaeger
clean-jaeger:
	$(call clean_service_data,jaeger)

# –¶–µ–ª—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Vector
clean-vector:
	$(call clean_service_data,vector)

# –ì–õ–ê–í–ù–ê–Ø –¶–ï–õ–¨: –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –í–°–ï–• —Å–µ—Ä–≤–∏—Å–æ–≤
clean: down
	@echo "--- –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö ---"
	@for service in $(SERVICES_WITH_DATA); do \
        $(call clean_service_data,$$service); \
    done
	@echo "--- –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---"

rebuild: clean
	@echo "‚ôªÔ∏è –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º –æ–±—Ä–∞–∑–æ–≤..."
	@docker-compose up -d --build
	@echo "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞."

# –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
help:
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@echo "  make up          - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."
	@echo "  make down        - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã."
	@echo "  validate-vector  - –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ vector"
	@echo "  make logs        - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."
	@echo "  make logs-s s=<–∏–º—è> - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, make logs-s s=loki)."
	@echo "  make clean       - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–µ–∫ –∏ –û–ß–ò–°–¢–ò–¢–¨ –í–°–ï –î–ê–ù–ù–´–ï."
	@echo "  make clean-grafana - –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è Grafana."
	@echo "  make clean-loki    - –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è Loki."
	@echo "  ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è prometheus, jaeger, vector."
	@echo "  make rebuild     - –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–µ–∫, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã."


# –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Ñ–∞–π–ª hosts
add-hosts:
	@echo "Adding service entries to $(HOSTS_FILE)..."
	@for service in $(HOSTS_SERVICES); do \
		if ! grep -q "127.0.0.1 $${service}" $(HOSTS_FILE); then \
			echo "127.0.0.1 $${service}" | sudo tee -a $(HOSTS_FILE) > /dev/null; \
			echo "  -> Added $${service}"; \
		else \
			echo "  -> $${service} already exists, skipping."; \
		fi; \
	done

# –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ hosts
remove-hosts:
	@echo "Removing service entries from $(HOSTS_FILE)..."
	@for service in $(HOSTS_SERVICES); do \
		if grep -q "127.0.0.1 $${service}" $(HOSTS_FILE); then \
			echo "  -> Removing $${service} from $(HOSTS_FILE)"; \
			sudo sh -c "awk -v SERVICE=\"$${service}\" '!( (\$1 == \"127.0.0.1\" && $$2 == SERVICE) ) { print }' $(HOSTS_FILE) > $(HOSTS_FILE).tmp && mv $(HOSTS_FILE).tmp $(HOSTS_FILE)"; \
		else \
			echo "  -> $${service} not found, skipping."; \
		fi; \
	done

.PHONY: up down logs logs-s clean clean-grafana clean-loki clean-prometheus clean-jaeger clean-vector help rebuild validate-vector add-hosts remove-hosts
